gwt {
    gwtVersion='2.8.2' // Should match the gwt version used for building the gwt backend
    maxHeapSize="1G" // Default 256m is not enough for gwt compiler. GWT is HUNGRY
    minHeapSize="1G"

    src = files(file("src/")) // Needs to be in front of "modules" below.
    modules 'com.iantria.raidgame.GdxDefinition'
    devModules 'com.iantria.raidgame.GdxDefinitionSuperdev'
    project.webAppDirName = 'webapp'


    compiler {
        strict = true;
        style = org.wisepersist.gradle.plugins.gwt.Style.DETAILED;
        disableCastChecking = true;
    }
}

import org.wisepersist.gradle.plugins.gwt.GwtSuperDev
import org.akhikhl.gretty.AppBeforeIntegrationTestTask

gretty.httpPort = 8080
gretty.resourceBase = project.buildDir.path + "/gwt/draftOut"
gretty.contextPath = "/"
gretty.portPropertiesFileName = "TEMP_PORTS.properties"

task startHttpServer () {
    dependsOn draftCompileGwt

    doFirst {
        copy {
            from "webapp"
            into gretty.resourceBase
        }

        copy {
            from "war"
            into gretty.resourceBase
        }
    }
}

task beforeRun(type: AppBeforeIntegrationTestTask, dependsOn: startHttpServer) {
    // The next line allows ports to be reused instead of
    // needing a process to be manually terminated.
    file("build/TEMP_PORTS.properties").delete()
    // Somewhat of a hack; uses Gretty's support for wrapping a task in
    // a start and then stop of a Jetty server that serves files while
    // also running the SuperDev code server.
    integrationTestTask 'superDev'

    interactive false
}

task superDev (type: GwtSuperDev) {
    dependsOn startHttpServer
    doFirst {
        gwt.modules = gwt.devModules
    }
}

//task dist(dependsOn: [clean, compileGwt]) {
//    doLast {
//        file("build/dist").mkdirs()
//        copy {
//            from "build/gwt/out"
//            into "build/dist"
//        }
//        copy {
//            from "webapp"
//            into "build/dist"
//            }
//        copy {
//            from "war"
//            into "build/dist"
//        }
//    }
//}

// This next line can be changed if you want to, for instance, always build into the
// docs/ folder of a Git repo, which can be set to automatically publish on GitHub Pages.
// This is relative to the html/ folder.

task dist(dependsOn: [clean, compileGwt]) {
    doLast {
        file("build/dist").mkdirs()
        copy {
            from("build/gwt/out"){
                exclude '**/*.symbolMap' // Not used by a dist, and these can be large.
            }
            into "build/dist"
        }
        copy {
            from("webapp") {
                exclude 'index.html' // We edit this HTML file later.
                exclude 'refresh.png' // We don't need this button; this saves some bytes.
            }
            into "build/dist"
        }
        copy {
            from("webapp") {
                // These next two lines take the index.html page and remove the superdev refresh button.
                include 'index.html'
                filter { String line -> line.replaceAll('<a class="superdev" .+', '') }
                // This does not modify the original index.html, only the copy in the dist.
            }
            into "build/dist"
        }
        copy {
            from "war"
            into "build/dist"
        }
    }
}
task distZip(type: Zip, dependsOn: dist){
    //// This uses the output of the dist task, which removes the superdev buttons from index.html .
    from("build/dist")
    archiveBaseName.set("${'$'}{appName}-dist")
    //// The result will be in html/build/ with a name containing "-dist".
    destinationDir(file("build"))
}



task addSource {
    doLast {
        sourceSets.main.compileClasspath += files(project(':core').sourceSets.main.allJava.srcDirs)
    }
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = [ "src/" ]

eclipse.project.name = appName + "-html"
